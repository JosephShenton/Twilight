//
//  ExploitingViewController.m
//  Twilight
//
//  Created by Joseph Shenton on 8/6/18.
//  Copyright Â© 2018 JJS Digital. All rights reserved.
//

#import "ExploitingViewController.h"
#include "SCLAlertView/SCLAlertView.h"
#include "sploit.h"
#include "jelbrek/jelbrek.h"
#include <stdlib.h>
#include <sys/stat.h>
#include <sys/spawn.h>
#include <mach/mach.h>
#include <sys/utsname.h>
#include <sys/dirent.h>
#include "utilities.h"

mach_port_t taskforpidzero;

uint64_t find_kernel_base() {
#define IMAGE_OFFSET 0x2000
#define MACHO_HEADER_MAGIC 0xfeedfacf
#define MAX_KASLR_SLIDE 0x21000000
#define KERNEL_SEARCH_ADDRESS_IOS10 0xfffffff007004000
#define KERNEL_SEARCH_ADDRESS_IOS9 0xffffff8004004000
#define KERNEL_SEARCH_ADDRESS_IOS 0xffffff8000000000
    
#define ptrSize sizeof(uintptr_t)
    
    uint64_t addr = KERNEL_SEARCH_ADDRESS_IOS10+MAX_KASLR_SLIDE;
    
    
    while (1) {
        char *buf;
        mach_msg_type_number_t sz = 0;
        kern_return_t ret = vm_read(taskforpidzero, addr, 0x200, (vm_offset_t*)&buf, &sz);
        
        if (ret) {
            goto next;
        }
        
        if (*((uint32_t *)buf) == MACHO_HEADER_MAGIC) {
            int ret = vm_read(taskforpidzero, addr, 0x1000, (vm_offset_t*)&buf, &sz);
            if (ret != KERN_SUCCESS) {
                printf("Failed vm_read %i\n", ret);
                goto next;
            }
            
            for (uintptr_t i=addr; i < (addr+0x2000); i+=(ptrSize)) {
                mach_msg_type_number_t sz;
                int ret = vm_read(taskforpidzero, i, 0x120, (vm_offset_t*)&buf, &sz);
                
                if (ret != KERN_SUCCESS) {
                    printf("Failed vm_read %i\n", ret);
                    exit(-1);
                }
                if (!strcmp(buf, "__text") && !strcmp(buf+0x10, "__PRELINK_TEXT")) {
                    
                    printf("kernel base: 0x%llx\nkaslr slide: 0x%llx\n", addr, addr - 0xfffffff007004000);
                    kernel_base_glob = addr;
                    kaslr_slide_glob = addr - 0xfffffff007004000;
                    return addr;
                }
            }
        }
        
    next:
        addr -= 0x200000;
    }
}

@interface ExploitingViewController ()

@end

@implementation ExploitingViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        taskforpidzero = go();
        
        if (taskforpidzero != MACH_PORT_NULL) {
            init_jelbrek(taskforpidzero, find_kernel_base());
            [self jelbrek];
        }
        else {
            
        }
        
        dispatch_async(dispatch_get_main_queue(), ^(void) {
            if (taskforpidzero != MACH_PORT_NULL) {
                if (jelbreked) {
                    extern NSMutableDictionary *all_apps;
                    if(all_apps == NULL) {
                        list_applications_installed();
                    }
                    
                    for (NSString* uuid in all_apps) {
                        NSMutableDictionary *app_dict = [all_apps objectForKey:uuid];
                        
                        if ([[app_dict objectForKey:@"valid"]  isEqual: @YES]) {
//                            printf("[INFO] ID: %s\n", [[app_dict objectForKey:@"identifier"] UTF8String]);
                            if ([[app_dict objectForKey:@"identifier"] containsString:@"houdini"]) {
                                hasHoudini = YES;
                                break;
                            } else {
                                hasHoudini = NO;
                            }
                        }
                    }
                    if (hasHoudini) {
                        SCLAlertView *alert = [[SCLAlertView alloc] init];
                        alert.shouldDismissOnTapOutside = NO;
                        [alert showError:self title:@"Error" subTitle:@"Please uninstall Houdini as we have receieved reports that it possible can cause crashes and enhanced unstability with Twilight." closeButtonTitle:nil duration:0.0f];
                    } else {
                        [self performSegueWithIdentifier:@"showTabControllerSegue" sender:self];
                    }
                } else {
                    // Exploit Failed
                    [self showExploitFailed];
                }
            }
            else {
                // Exploit Failed
                [self showExploitFailed];
            }
            
        });
    });
}

- (void)jelbrek {
    get_root(getpid());
    empower(getpid());
    unsandbox(getpid());
    remount(kernel_base_glob, kaslr_slide_glob);
    
    if (geteuid() == 0) {
        FILE *f = fopen("/var/mobile/.Twilight", "w");
        if (f == 0) {
            jelbreked = NO;
        } else {
            FILE *f = fopen("/.Twilight", "w");
            if (f == 0) {
                printf("DIDNT WRITE TO /.Twilight\n");
                FILE *f = fopen("/etc/.Twilight", "w");
                if (f == 0) {
                    printf("DIDNT WRITE TO /etc/.Twilight\n");
                } else {
                    //                jelbreked = YES;
                    printf("WROTE TO /etc/.Twilight\n");
                }
            } else {
//                jelbreked = YES;
                printf("WROTE TO /.Twilight\n");
                FILE *f = fopen("/etc/.Twilight", "w");
                if (f == 0) {
                    printf("DIDNT WRITE TO /etc/.Twilight\n");
                } else {
                    //                jelbreked = YES;
                    printf("WROTE TO /etc/.Twilight\n");
                }
            }
            fclose(f);
            jelbreked = YES;
        }
        fclose(f);
    }
    else {
        jelbreked = NO;
    }
    
}

- (void)showExploitFailed {
    UIViewController *viewController = [self.storyboard instantiateViewControllerWithIdentifier:@"exploitFailedView"];
    viewController.providesPresentationContextTransitionStyle = YES;
    viewController.definesPresentationContext = YES;
    [viewController setModalPresentationStyle:UIModalPresentationOverCurrentContext];
    [self presentViewController:viewController animated:YES completion:nil];
}

@end
